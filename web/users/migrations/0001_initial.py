# Generated by Django 3.0.8 on 2020-07-25 06:08

import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserHC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=True, verbose_name='student')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='teacher')),
                ('is_admin', models.BooleanField(default=False, verbose_name='admin')),
                ('uses_email_username', models.BooleanField(default=True, verbose_name='using email as username')),
                ('billing_address_1', models.CharField(blank=True, max_length=191, verbose_name='street address (line 1)')),
                ('billing_address_2', models.CharField(blank=True, max_length=191, verbose_name='street address (continued)')),
                ('billing_city', models.CharField(blank=True, default='Seattle', max_length=191, verbose_name='city')),
                ('billing_country_area', models.CharField(blank=True, default='WA', help_text='State, Territory, or Province', max_length=2, verbose_name='state')),
                ('billing_postcode', models.CharField(blank=True, help_text='Zip or Postal Code', max_length=10, verbose_name='zipcode')),
                ('billing_country_code', models.CharField(blank=True, default='USA', max_length=191, verbose_name='country')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', users.models.UserManagerHC()),
            ],
        ),
        migrations.CreateModel(
            name='StaffUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.userhc',),
            managers=[
                ('objects', users.models.UserManagerHC()),
            ],
        ),
        migrations.CreateModel(
            name='StudentUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.userhc',),
            managers=[
                ('objects', users.models.UserManagerHC()),
            ],
        ),
    ]
